// üìò TRAINING SET: DESTRUCTURING MINDSET ‚Äî from foundational to abstract engineering

"use strict";

/*
LEVEL 1 ‚Äî STRUCTURE & SYNTAX
Purpose: Build comfort with basic patterns and edge behavior
*/

// üü¢ –ó–∞–¥–∞—á–∞ 1. –ì–æ—Ç–æ–≤–æ.
// 1. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `getFirstAndSecond(arr)`, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `{ first, second }` –∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞. –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –Ω—É–ª–∏.
/**
 *
 * @param {number[]} [arr = []] - –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤
 * @returns {{first: number, second: number}}
 */

const getFirstAndSecond = function (arr) {
  const src = Array.isArray(arr) ? arr : [];
  const [first = 0, second = 0] = src;
  return { first, second };
};

console.log(getFirstAndSecond([1, 2])); // { first: 1, second: 2 }
console.log(getFirstAndSecond([1, 2, 3])); // { first: 1, second: 2 }
console.log(getFirstAndSecond(1, 2, 3)); // { first: 0, second: 0 }
console.log(getFirstAndSecond(null)); // { first: 0, second: 0 }
console.log(getFirstAndSecond(undefined)); // { first: 0, second: 0 }
console.log(getFirstAndSecond("")); // { first: 0, second: 0 }
console.log(getFirstAndSecond("Hi there!")); // { first: 0, second: 0 }
console.log(getFirstAndSecond(0)); // { first: 0, second: 0 }

// üü¢ –ó–∞–¥–∞—á–∞ 2. –ì–æ—Ç–æ–≤–æ

// 2. –ù–∞–ø–∏—à–∏ `splitFirstSafe(arr)`, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `{ first, rest }`. `rest` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º. –ï—Å–ª–∏ –≤—Ö–æ–¥ ‚Äî –Ω–µ –º–∞—Å—Å–∏–≤, –∑–∞—â–∏—Ç–∏ –æ—Ç –æ—à–∏–±–∫–∏.
/**
 *
 * @param {number[]} [arr = []] - –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤
 * @returns {{first: number|null, rest: number[]}} - —á–∏—Å–ª–æ –∏ –º–∞—Å—Å–∏–≤
 */

const splitFirstSafe = (arr) => {
  if (!Array.isArray(arr)) {
    // throw new Error("Invalid input structure");
  }
  // first = null -> –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  const [first = null, ...rest] = arr;
  return { first, rest };
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
const { first, rest } = splitFirstSafe([1, 2, 3, 4, 5]);
console.log(first, rest);

// –ü—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–æ–≤
console.log(splitFirstSafe([1, 2, 3, 4, 5])); // { first: 1, rest: [ 2, 3, 4, 5 ] }
console.log(splitFirstSafe([1])); // { first: 1, rest: [] }
console.log(splitFirstSafe([])); // { first: null, rest: [] }
console.log(splitFirstSafe("")); // –∂—ë—Å—Ç–∫–∏–π –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏

/*
 function splitFirstSafe(arr, strict = true) {
  if (!Array.isArray(arr)) {
    if (strict) {
      throw new Error("Invalid input structure");
    } else {
      arr = []; // –º—è–≥–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞
    }
  }

  const [first = null, ...rest] = arr;
  return { first, rest };
}
 */

// –ù–£–ñ–ï–ù –ê–ù–ê–õ–ò–ó
// 3. –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä—É–π –º–∞—Å—Å–∏–≤ `[1, , [ , 5 ], 7]` —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å `x = 1`, `y = 0`, `z = 5`, `t = 7`. –ó–Ω–∞—á–µ–Ω–∏—è `y` –∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 0.

const someArr = [1, , [, 5], 7];
const destructNested = function (arr) {};

/*
LEVEL 2 ‚Äî TYPE SAFETY & VALIDATION
Purpose: Think like a defensive engineer, not just coder
*/

// 4. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `safeUnpackFirstThree(arr)`, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `{ a, b, c }` —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏ 0. –í—Ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –º–∞—Å—Å–∏–≤–æ–º.

// 5. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `deepDestruct(arr)`, –≤ –∫–æ—Ç–æ—Ä–æ–π `arr` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –≤–∏–¥–∞ `[id, , [score], isActive]`. –ó–∞—â–∏—Ç–∏ –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤. –í–µ—Ä–Ω–∏ `{ id, score, isActive }`, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî –¥–µ—Ñ–æ–ª—Ç—ã.

/*
LEVEL 3 ‚Äî ABSTRACTION & PATTERN RECOGNITION
Purpose: Formulate mental models of data flows
*/

// 6. –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é `processTuple([a, b, c = 100])`, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `{ a, b, c }` –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

// 7. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `reverseHeadAndRest(arr)`, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å `first`, `second`, `rest`.

// 8. –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä—É–π –º–∞—Å—Å–∏–≤ `["Alex", 42, [95], true]` –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ `name`, `age`, `score`, `isAdmin`. –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç.

/*
LEVEL 4 ‚Äî ARCHITECTURAL USE & COMPOSITION
Purpose: Combine techniques in functional wrappers
*/

// 9. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `normalizeUserData(input)`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤–∏–¥–∞ `[name, age, ...tags]`. –í–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç `{ name, age, tags }`. –ó–∞—â–∏—Ç–∏ –æ—Ç –Ω–µ-–º–∞—Å—Å–∏–≤–æ–≤.

// 10. –ù–∞–ø–∏—à–∏ `tupleRouter(tuple)`, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ `[type, payload, ...meta]` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞:
// - `{ user: payload, meta }`, –µ—Å–ª–∏ `type === 'user'`
// - `{ log: payload, meta }`, –µ—Å–ª–∏ `type === 'log'`
// - `{ unknown: payload, meta }`, –∏–Ω–∞—á–µ.

// 11. –†–µ–∞–ª–∏–∑—É–π `destructAndTransform([name, age, [score], role])`, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç:
// `{ username: name.toUpperCase(), years: age, rating: score * 1.2, admin: role === true }`

/*
–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî —à–∞–≥ –≤ —Å—Ç–æ—Ä–æ–Ω—É –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è: –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä, –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ, —à–∞–±–ª–æ–Ω—ã —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.
*/
